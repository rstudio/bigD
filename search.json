[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Information and Guidelines for Contributing to bigD","title":"Information and Guidelines for Contributing to bigD","text":"many ways contribute ongoing development bigD package. contributions can rather easy (e.g., fixing typos, improving documentation, filing issues feature requests problems, etc.) whereas contributions can require time patience (like answering questions submitting pull requests code changes). Just know help provided capacity much appreciated. :)","code":""},{"path":"/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing Issues","title":"Information and Guidelines for Contributing to bigD","text":"believe found bug, create minimal reprex posting bigD issue tracker. Try include anything unnecessary, just minimal amount code constitutes reproducible bug. try verify bug running code reprex provided. quality reprex reduce amount back--forth communication trying understand execute code systems.","code":""},{"path":"/CONTRIBUTING.html","id":"answering-questions","dir":"","previous_headings":"","what":"Answering questions","title":"Information and Guidelines for Contributing to bigD","text":"great way help simply answering questions. ’s amazing little conversation lead better insights problem. Don’t quite know answer? ’s okay . ’re together. might answer user questions? forums Q&bigD include RStudio community, Twitter (good search term bigD #rstats), Stack Overflow. Good etiquette key interactions: good person ask questions.","code":""},{"path":"/CONTRIBUTING.html","id":"making-pull-requests","dir":"","previous_headings":"Answering questions","what":"Making Pull Requests","title":"Information and Guidelines for Contributing to bigD","text":"consider making pull request (PR), please file issue first explain problem detail. PR enhancement, detail change make things better package users. Bugfix PRs also requre explanation bug proposed fix remove bug. great way illustrate bug include reprex. upfront work prior preparing PR can time-consuming opens line communication package authors community, perhaps leading better enhancement effective fixes! consensus PR based issue helpful, adhering following process make things proceed quickly: Create separate Git branch PR. Look GitHub Actions build status badges making changes; badges available package README. bigD package follows tidyverse style guide please adopt style guidelines submitted code best possible. internal documentation uses roxygen2; contribution requires new revised documentation ensure roxygen comments added/modified (modify .Rd files man folder). use testthat code coverage; contributions test cases included helpful easier accept.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018-2023 bigD authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Thank contributing bigD! make process easier everyone, please explain context purpose contribution. Also, list changes made existing code documentation.","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-prs","dir":"","previous_headings":"","what":"Related GitHub Issues and PRs","title":"Summary","text":"Ref: #","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"Summary","text":"understand agree Code Conduct. listed major changes NEWS. added testthat unit tests tests/testthat new functionality.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Iannone. Author, maintainer. Olivier Roy. Contributor. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iannone R (2025). bigD: Flexibly Format Dates Times Given Locale. R package version 0.3.1, https://github.com/rstudio/bigD, https://rstudio.github.io/bigD/.","code":"@Manual{,   title = {bigD: Flexibly Format Dates and Times to a Given Locale},   author = {Richard Iannone},   year = {2025},   note = {R package version 0.3.1, https://github.com/rstudio/bigD},   url = {https://rstudio.github.io/bigD/}, }"},{"path":"/index.html","id":"bigd-","dir":"","previous_headings":"","what":"Flexibly Format Dates and Times to a Given Locale","title":"Flexibly Format Dates and Times to a Given Locale","text":"goal bigD give everyone easy yet flexible solution formatting dates times. main function, fdt(), can take dates, times, datetimes various formats (including just strings) provides means format output different locales. formatting syntax much powerful strptime-based formatting (plus need % everywhere). Time zones input can expressed multiple ways ’s ton options formatting time zones output .","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Flexibly Format Dates and Times to a Given Locale","text":"Given ISO-8601 date string \"2018-07-04\", let’s adjust format string precisely get date form need. \"y/M/d\" nice year/month/day date returned us. variations time parts, ’s possible get friendlier version date. locale option, can localize date. Let’s change format string use German locale (\"de\"). datetime string like \"2018-07-24T14:44:22.234343-0800\", possibilities. follows ISO 8601 spec pretty closely notice UTC offset value added end () express time zone information. Let’s see different datetime French. Next, let’s take look slight variation Finnish. tz offset formatted \"ZZZZ\". , let’s use \"XX\" . Time zone support super comprehensive. can attach time zone ID, like \"America/Vancouver\" (many others), datetime string. just got make sure ’s wrapped parens. Just know, time zone ID can alternatively set use_tz argument fdt(). Also, POSIXct/POSIXlt/Date times can used inputs. Plus, function vectorized. formatting syntax lot can learn fairly comprehensive documentation.","code":"fdt(   input = \"2018-07-04\",   format = \"y/M/d\" ) #> [1] 2018/7/4 fdt(   input = \"2018-07-04\",   format = \"MMMM d, y.\" ) #> [1] July 4, 2018. fdt(   input = \"2018-07-04\",   format = \"d. MMMM y (EEEE).\",   locale = \"de\" ) #> [1] 4. Juli 2018 (Mittwoch). fdt(   input = \"2018-07-24T14:44:22.234343-0800\",   format = \"MMM dd HH:mm:ss ZZZZ yyyy\",   locale = \"fr\" ) #> [1] juil. 24 14:44:22 GMT-8:00 2018 fdt(   input = \"2018-07-24T14:44:22.234343-0800\",   format = \"MMMM dd HH:mm:ss 'yy XX\",   locale = \"fi\" ) #> [1] heinäkuuta 24 14:44:22 '18 -0800 fdt(   input = \"2014-06-23T13:24:09.84(America/Vancouver)\",   format = \"yyyy.MM.dd G, HH:mm:ss zzzz\",   locale = \"es\" ) #> [1] 2014.06.23 d. C., 13:24:09 hora de verano del Pacífico"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexibly Format Dates and Times to a Given Locale","text":"Want try ? bigD package available CRAN: can also install development version bigD GitHub: encounter bug, usage questions, want share ideas make package better, feel free file issue.","code":"install.packages(\"bigD\") devtools::install_github(\"rstudio/bigD\")"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"Installation","what":"Code of Conduct","title":"Flexibly Format Dates and Times to a Given Locale","text":"Please note rstudio/bigD project released contributor code conduct.participating project agree abide terms.","code":""},{"path":"/index.html","id":"id_-license","dir":"","previous_headings":"Installation","what":"📄 License","title":"Flexibly Format Dates and Times to a Given Locale","text":"bigD licensed MIT license. See LICENSE.md file details. © Posit Software, PBC.","code":""},{"path":"/index.html","id":"id_️-governance","dir":"","previous_headings":"Installation","what":"🏛️ Governance","title":"Flexibly Format Dates and Times to a Given Locale","text":"project primarily maintained Rich Iannone. also authors, might occasionally assist duties.","code":""},{"path":"/reference/fdt.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a datetime with a formatting string — fdt","title":"Format a datetime with a formatting string — fdt","text":"fdt(), can format datetime values greatest ease, , great power. lot leniency types input date/time/datetime values can passed . formatting string allows huge array possibilities formatting. , can set locale value get formatted values localized language/region choice. plenty ways represent time zone information, goes along option enrich input values precise time zone identifier (like \"America/Los_Angeles\"). choices ample , goal comprehensiveness ease--use date/time formatting.","code":""},{"path":"/reference/fdt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a datetime with a formatting string — fdt","text":"","code":"fdt(input, format = NULL, use_tz = NULL, locale = NULL)"},{"path":"/reference/fdt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a datetime with a formatting string — fdt","text":"input vector date, time, datetime values. Several representations acceptable including strings, Date objects, POSIXct objects. Refer Valid Input Values section information. format formatting string apply input values. provided, inputs formatted ISO 8601 datetime strings. Date/Time Format Syntax section detailed information create formatting string. use_tz tzid (e.g., \"America/New_York\") time-zone designation precise formatting related outputs. overrides time zone information available character-based input values applied vector components. locale output locale use formatting input value according specified locale's rules. Example locale names include \"en\" English (United States) \"es-EC\" Spanish (Ecuador). locale provided \"en\" locale used. fdt_locales_vec vector contains valid locales fdt_locales_lst list provides easy way obtain valid locale.","code":""},{"path":"/reference/fdt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a datetime with a formatting string — fdt","text":"character vector formatted dates, times, datetimes.","code":""},{"path":"/reference/fdt.html","id":"valid-input-values","dir":"Reference","previous_headings":"","what":"Valid Input Values","title":"Format a datetime with a formatting string — fdt","text":"input argument fdt() function allows flexibility can passed . section describes kinds inputs understandable fdt(). vector strings allowed, vectors Date POSIXct values. using strings, good option use adhere ISO 8601:2004 standard. datetime can form YYYY-MM-DDThh:mm:ss.s<TZD>. , YYYY-MM-DD corresponds date, literal \"T\" optional, hh:mm:ss time (seconds, ss, optional .s fractional seconds), <TZD> refers optional time-zone designation (time zones next paragraph). can provide just date part, assumes midnight implicit time. also possible provide just time part, internally assembles datetime uses current date. formatting standalone dates times, probably just format explicit parts fdt() error format complementary parts. time zone designation string-based datetimes completely optional. provided \"UTC\" assumed. want supply time zone information, can given offset value following constructions: <time>Z <time>(+/-)hh:mm <time>(+/-)hhmm <time>(+/-)hh first, <time>Z, zone designator zero UTC offset; equivalent \"+00:00\". next two formats providing time offsets UTC hours minutes fields. Examples \"-05:00\" (New York, standard time), \"+0200\" (Cairo), \"+05:30\" (Mumbai). Note colon optional leading zeros maintain two-digit widths essential. final format, <time>(+/-)hh, omits minutes field many offsets \"00\" minutes values, can convenient. can also supply Olson/IANA-style time zone identifier (tzid) parentheses within string, , value supplied use_tz (tzid apply date/time/datetime values input vector). extension, use form: YYYY-MM-DDThh:mm:ss.s<TZD>(<tzid>). <TZD> (UTC offset value) <tzid> really used together occurs <tzid> overrides UTC offset. examples: \"2018-07-04T22:05 (America/Vancouver)\" (preferable) \"2018-07-04T22:05-0800(America/Vancouver)\" (redundant, still okay) tzid contains much information time zone UTC offset value since tied geographical location timing Standard Time (STD) Daylight Saving Time (DST) known. essence can derive UTC offset values tzid also host identifiers (time zone names, abbreviations, etc.). examples valid tzid values can used: \"America/Jamaica\" (official time Jamaica, , \"Jamaica Time\") \"Australia/Perth\" (\"+08:00\" year round Western Australia) \"Europe/Dublin\" (IST/GMT time: \"+01:00\"/\"+00:00\") tz database (compilation information world's time zones) consists canonical zone names (primary preferred) alternative names (less preferred modern usage, either discarded commonly replaced canonical zone name). fdt() function can handle types occurs non-canonical tzid values internally mapped onto canonical zone names. examples: \"Africa/Luanda\" (Angola) maps \"Africa/Lagos\" \"America/Indianapolis\" maps \"America/Indiana/Indianapolis\" \"Asia/Calcutta\" maps \"Asia/Kolkata\" \"Pacific/Midway\" maps \"Pacific/Pago_Pago\" \"Egypt\" maps \"Africa/Cairo\" part, Olson-format tzid follows form \"{region}/{city}\" region usually continent, city considered 'exemplar city', exemplar city belongs country.","code":""},{"path":"/reference/fdt.html","id":"date-time-format-syntax","dir":"Reference","previous_headings":"","what":"Date/Time Format Syntax","title":"Format a datetime with a formatting string — fdt","text":"formatting pattern used bigD consists string characters, certain strings replaced date time data derived parsed input. characters used patterns tabulated show specific strings produce outputs (e.g., \"y\" year). common pattern characters used consecutively produce variations date, time, timezone output. Say year input 2015. using \"yy\" get \"15\" \"yyyy\" output becomes \"2015\". whole lot , following subsections try illustrate best possible string produce. examples use string-based datetime input unless otherwise indicated: \"2018-07-04T22:05:09.2358(America/Vancouver)\"","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"calendar-year-little-y-","dir":"Reference","previous_headings":"","what":"Calendar Year (little y)","title":"Format a datetime with a formatting string — fdt","text":"yields calendar year, always numeric. cases length \"y\" field specifies minimum number digits display, zero-padded necessary. digits displayed needed show full year. exception: \"yy\" gives use just two low-order digits year, zero-padded necessary. use cases, \"y\" \"yy\" good enough.","code":""},{"path":"/reference/fdt.html","id":"year-in-the-week-in-year-calendar-big-y-","dir":"Reference","previous_headings":"","what":"Year in the Week in Year Calendar (big Y)","title":"Format a datetime with a formatting string — fdt","text":"year 'Week Year' based calendars year transition occurs week boundary. may differ calendar year \"y\" near year transition. numeric year designation used conjunction pattern character \"w\" ISO year-week calendar defined ISO 8601.","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"quarter-of-the-year-formatting-big-q-and-standalone-little-q-","dir":"Reference","previous_headings":"","what":"Quarter of the Year: formatting (big Q) and standalone (little q)","title":"Format a datetime with a formatting string — fdt","text":"quarter names identified numerically, starting 1 ending 4. Quarter names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form quarters year consists run \"Q\" values whereas standalone form uses \"q\".","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"month-formatting-big-m-and-standalone-big-l-","dir":"Reference","previous_headings":"","what":"Month: formatting (big M) and standalone (big L)","title":"Format a datetime with a formatting string — fdt","text":"month names identified numerically, starting 1 ending 12. Month names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form months consists run \"M\" values whereas standalone form uses \"L\".","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"week-of-year-little-w-","dir":"Reference","previous_headings":"","what":"Week of Year (little w)","title":"Format a datetime with a formatting string — fdt","text":"Values calculated week year range 1 53. Week 1 year first week contains least specified minimum number days year. Weeks week 1 one year week 1 following year numbered sequentially 2 52 53 (needed). two available field lengths. display week year value \"ww\" width always show two digits (weeks 1 9 zero padded).","code":""},{"path":"/reference/fdt.html","id":"week-of-month-big-w-","dir":"Reference","previous_headings":"","what":"Week of Month (big W)","title":"Format a datetime with a formatting string — fdt","text":"week month can range 1 5. first day every month always begins week 1 every transition beginning week, week month value incremented 1.","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"day-of-month-little-d-","dir":"Reference","previous_headings":"","what":"Day of Month (little d)","title":"Format a datetime with a formatting string — fdt","text":"day month value always numeric two available field length choices formatting. display day month value \"dd\" formatting always show two digits (days 1 9 zero padded).","code":""},{"path":"/reference/fdt.html","id":"day-of-year-big-d-","dir":"Reference","previous_headings":"","what":"Day of Year (big D)","title":"Format a datetime with a formatting string — fdt","text":"day year value ranges 1 (January 1) either 365 366 (December 31), higher value range indicates year leap year (29 days February, instead 28). field length specifies minimum number digits, zero-padding necessary.","code":""},{"path":"/reference/fdt.html","id":"day-of-week-in-month-big-f-","dir":"Reference","previous_headings":"","what":"Day of Week in Month (big F)","title":"Format a datetime with a formatting string — fdt","text":"day week month returns numerical value indicating number times given weekday occurred month (e.g., '2nd Monday March'). conveniently resolves predicable case structure ranges day month values return predictable day week month values: days 1 - 7 -> 1 days 8 - 14 -> 2 days 15 - 21 -> 3 days 22 - 28 -> 4 days 29 - 31 -> 5","code":""},{"path":"/reference/fdt.html","id":"modified-julian-date-little-g-","dir":"Reference","previous_headings":"","what":"Modified Julian Date (little g)","title":"Format a datetime with a formatting string — fdt","text":"modified version Julian date obtained subtracting 2,400,000.5 days Julian date (number days since January 1, 4713 BC). essentially results number days since midnight November 17, 1858. half day offset (unlike Julian date, modified Julian date referenced midnight instead noon).","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"day-of-week-name-big-e-","dir":"Reference","previous_headings":"","what":"Day of Week Name (big E)","title":"Format a datetime with a formatting string — fdt","text":"name day week offered four different widths.","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"am-pm-period-of-day-little-a-","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day (little a)","title":"Format a datetime with a formatting string — fdt","text":"denotes noon noon time periods. May upper lowercase depending locale options. wide form may short form 'real' long form (e.g. 'ante meridiem') customarily used. narrow form must unique, unlike fields.","code":""},{"path":"/reference/fdt.html","id":"am-pm-period-of-day-plus-noon-and-midnight-little-b-","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day Plus Noon and Midnight (little b)","title":"Format a datetime with a formatting string — fdt","text":"Provide PM well phrases exactly noon midnight. May upper lowercase depending locale options. locale notion unique 'noon' (.e., 12:00), PM form may substituted. similar behavior can occur 'midnight' (00:00) form. narrow form must unique, unlike fields. () input_midnight: \"2020-05-05T00:00:00\" (b) input_noon: \"2020-05-05T12:00:00\"","code":""},{"path":"/reference/fdt.html","id":"flexible-day-periods-big-b-","dir":"Reference","previous_headings":"","what":"Flexible Day Periods (big B)","title":"Format a datetime with a formatting string — fdt","text":"Flexible day periods denotes things like 'afternoon', 'evening', etc., flexibility comes locale's language script. locale associated rule set specifies day periods start end locale. () input_morning: \"2020-05-05T00:08:30\" (b) input_afternoon: \"2020-05-05T14:00:00\"","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"hour-big-h-","dir":"Reference","previous_headings":"","what":"Hour 0-23 (big H)","title":"Format a datetime with a formatting string — fdt","text":"Hours 0 23 standard 24-hour clock cycle (midnight plus 1 minute 00:01) using \"HH\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"/reference/fdt.html","id":"hour-little-h-","dir":"Reference","previous_headings":"","what":"Hour 1-12 (little h)","title":"Format a datetime with a formatting string — fdt","text":"Hours 1 12 standard 12-hour clock cycle (midnight plus 1 minute 12:01) using \"hh\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"/reference/fdt.html","id":"hour-little-k-","dir":"Reference","previous_headings":"","what":"Hour 1-24 (little k)","title":"Format a datetime with a formatting string — fdt","text":"Using hours 1 24 less common way express 24-hour clock cycle (midnight plus 1 minute 24:01) using \"kk\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"/reference/fdt.html","id":"hour-big-k-","dir":"Reference","previous_headings":"","what":"Hour 0-11 (big K)","title":"Format a datetime with a formatting string — fdt","text":"Using hours 0 11 less common way express 12-hour clock cycle (midnight plus 1 minute 00:01) using \"KK\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"/reference/fdt.html","id":"minute-little-m-","dir":"Reference","previous_headings":"","what":"Minute (little m)","title":"Format a datetime with a formatting string — fdt","text":"minute hour can number 0 59. Use \"m\" show minimum number digits, \"mm\" always show two digits (zero-padding, necessary).","code":""},{"path":"/reference/fdt.html","id":"seconds-little-s-","dir":"Reference","previous_headings":"","what":"Seconds (little s)","title":"Format a datetime with a formatting string — fdt","text":"second minute can number 0 59. Use \"s\" show minimum number digits, \"ss\" always show two digits (zero-padding, necessary).","code":""},{"path":"/reference/fdt.html","id":"fractional-second-big-s-","dir":"Reference","previous_headings":"","what":"Fractional Second (big S)","title":"Format a datetime with a formatting string — fdt","text":"fractional second truncates (like time fields) width requested (.e., count letters). using pattern \"SSSS\" display four digits past decimal (, incidentally, needs added manually pattern).","code":""},{"path":"/reference/fdt.html","id":"milliseconds-elapsed-in-day-big-a-","dir":"Reference","previous_headings":"","what":"Milliseconds Elapsed in Day (big A)","title":"Format a datetime with a formatting string — fdt","text":"86,400,000 milliseconds day \"\" pattern provide whole number. width can go nine digits \"AAAAAAAAA\" higher field widths result zero padding necessary. Using \"2011-07-27T00:07:19.7223\":","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"the-era-designator-big-g-","dir":"Reference","previous_headings":"","what":"The Era Designator (big G)","title":"Format a datetime with a formatting string — fdt","text":"provides era name given date. Gregorian calendar two eras: AD BC. AD year numbering system, AD 1 immediately preceded 1 BC, nothing (year zero).","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"tz-short-and-long-specific-non-location-format-little-z-","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Specific non-Location Format (little z)","title":"Format a datetime with a formatting string — fdt","text":"short long specific non-location formats time zones suggested displaying time user friendly time zone name. short specific format unavailable, fall back short localized GMT format (\"O\"). long specific format unavailable, fall back long localized GMT format (\"OOOO\").","code":""},{"path":"/reference/fdt.html","id":"tz-common-utc-offset-formats-big-z-","dir":"Reference","previous_headings":"","what":"TZ // Common UTC Offset Formats (big Z)","title":"Format a datetime with a formatting string — fdt","text":"ISO8601 basic format hours, minutes optional seconds fields represented \"Z\", \"ZZ\", \"ZZZ\". format equivalent RFC 822 zone format (optional seconds field absent). equivalent \"xxxx\" specifier. field pattern \"ZZZZ\" represents long localized GMT format. equivalent \"OOOO\" specifier. Finally, \"ZZZZZ\" pattern yields ISO8601 extended format hours, minutes optional seconds fields. ISO8601 UTC indicator Z used local time offset 0. equivalent \"XXXXX\" specifier.","code":""},{"path":"/reference/fdt.html","id":"tz-short-and-long-localized-gmt-formats-big-o-","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Localized GMT Formats (big O)","title":"Format a datetime with a formatting string — fdt","text":"localized GMT formats come two widths \"O\" (removes minutes field 0) \"OOOO\" (always contains minutes field). use GMT indicator changes according locale.","code":""},{"path":"/reference/fdt.html","id":"tz-short-and-long-generic-non-location-formats-little-v-","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Generic non-Location Formats (little v)","title":"Format a datetime with a formatting string — fdt","text":"generic non-location formats useful displaying recurring wall time (e.g., events, meetings) anywhere people want overly specific. either unavailable, fallback generic location format (\"VVVV\"), short localized GMT format final fallback.","code":""},{"path":"/reference/fdt.html","id":"tz-short-time-zone-ids-and-exemplar-city-formats-big-v-","dir":"Reference","previous_headings":"","what":"TZ // Short Time Zone IDs and Exemplar City Formats (big V)","title":"Format a datetime with a formatting string — fdt","text":"formats provide variations time zone ID often include exemplar city. widest formats, \"VVVV\", useful populating choice list time zones, supports 1--1 name/zone ID mapping uniform text formats.","code":""},{"path":"/reference/fdt.html","id":"tz-iso-formats-with-z-for-big-x-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats with Z for +0000 (big X)","title":"Format a datetime with a formatting string — fdt","text":"\"X\"-\"XXX\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. final two widths, \"XXXX\" \"XXXXX\" allow optional seconds fields. seconds field supported ISO 8601 specification. , ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":"/reference/fdt.html","id":"tz-iso-formats-no-use-of-z-for-little-x-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats (no use of Z for +0000) (little x)","title":"Format a datetime with a formatting string — fdt","text":"\"x\"-\"xxxxx\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. similar \"X\"-\"XXXXX\" field patterns except ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":[]},{"path":"/reference/fdt.html","id":"basics-with-input-datetimes-formatting-strings-and-localization","dir":"Reference","previous_headings":"","what":"Basics with input datetimes, formatting strings, and localization","title":"Format a datetime with a formatting string — fdt","text":"input datetime \"2018-07-04 22:05\" supplied string, can format get just date full year first, month abbreviation second, day month last (separated hyphens):     sometimes many options time part. Instead using \"y-MMM-dd\", try variation \"yy-MMMM-d\":     output localizable elements translated supplying appropriate locale code. use locale = es get month written Spanish:     POSIXct POSIXlt datetimes can serve input fdt(). create single datetime value timezone set \"Asia/Tokyo\".     going minimal, possible supply input datetime string without format directive. gives us formatted datetime output conforms ISO 8601. Note implied time zone UTC.","code":"fdt(   input = \"2018-07-04 22:05\",   format = \"y-MMM-dd\" ) #> [1] \"2018-Jul-04\" fdt(   input = \"2018-07-04 22:05\",   format = \"yy-MMMM-d\" ) #> [1] \"18-July-4\" fdt(   input = \"2018-07-04 22:05\",   format = \"yy-MMMM-d\",   locale = \"es\" ) #> [1] \"18-julio-4\" fdt(   input = lubridate::ymd_hms(\"2020-03-15 19:09:12\", tz = \"Asia/Tokyo\"),   format = \"EEEE, MMMM d, y 'at' h:mm:ss B (VVVV)\" ) #> [1] \"Sunday, March 15, 2020 at 7:09:12 in the evening (Tokyo Time)\" fdt(input = \"2018-07-04 22:05\") #> [1] \"2018-07-04T22:05:00Z\""},{"path":"/reference/fdt.html","id":"using-locales-stored-in-the-fdt-locales-lst-list","dir":"Reference","previous_headings":"","what":"Using locales stored in the fdt_locales_lst list","title":"Format a datetime with a formatting string — fdt","text":"fdt_locales_lst object provided bigD make easier choose one supported locales. can avoid typing errors every element list meant work. example, can use \"\" locale accessing fdt_locales_lst (autocomplete makes relatively simple).","code":"fdt(   input = \"2018-07-04 22:05\",   format = \"yy-MMMM-d\",   locale = fdt_locales_lst$it ) #> [1] \"18-luglio-4\""},{"path":"/reference/fdt.html","id":"omission-of-date-or-time-in-input","dir":"Reference","previous_headings":"","what":"Omission of date or time in input","title":"Format a datetime with a formatting string — fdt","text":"supply full datetime input. Just supplying date portion implies midnight (just fine going present date anyway).     omit date just supply time, fdt() correctly parse . current date user system used need create sort datetime value internally. , alright just intend present formatted time value.     see supported locales, can look vector supplied fdt_locales_vec() function.","code":"fdt(input = \"2018-07-04\") #> [1] \"2018-07-04T00:00:00Z\" fdt(input = \"22:05\") #> [1] \"2022-08-16T22:05:00Z\""},{"path":"/reference/fdt.html","id":"using-standardized-forms-with-the-standard-helper-functions","dir":"Reference","previous_headings":"","what":"Using standardized forms with the standard_*() helper functions","title":"Format a datetime with a formatting string — fdt","text":"input datetime \"2018-07-04 22:05(America/Vancouver)\", can format date time standardized way standard_date_time() providing correct formatting string. function invoked format argument fdt():     locale can changed worry particulars formatting string (standardized across locales).     can use different type values control output datetime string. default \"short\".     , \"medium\":     \"short\" \"medium\" types display time zone information output. Beginning \"long\", tz shown.     include time zone information input, \"UTC\" time zone assumed:","code":"fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"full\") ) #> [1] \"Wednesday, July 4, 2018 at 10:05:00 PM Pacific Daylight Time\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"full\"),   locale = fdt_locales_lst$nl ) #> [1] \"woensdag 4 juli 2018 om 22:05:00 Pacific-zomertijd\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time() ) #> [1] \"7/4/18, 10:05 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"medium\") ) #> [1] \"Jul 4, 2018, 10:05:00 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"long\") ) #> [1] \"July 4, 2018 at 10:05:00 PM PDT\" fdt(   input = \"2018-07-04 22:05\",   format = standard_date_time(type = \"full\") ) #> [1] \"Wednesday, July 4, 2018 at 10:05:00 PM GMT+00:00\""},{"path":"/reference/fdt.html","id":"using-flexible-date-and-time-and-hour-formatting","dir":"Reference","previous_headings":"","what":"Using flexible date and time (12- and 24-hour) formatting","title":"Format a datetime with a formatting string — fdt","text":"bigD package supplies set lists allow flexible date time formatting (flex_d_lst, flex_t24_lst, flex_t12_lst). useful need particular format works across locales. example uses \"yMMMEd\" flexible date type accessing flex_d_lst object, yielding formatted date.     wanted different locale, locale-specific format pattern behind flexible date identifier ensure consistency moving locale.     Formatting 12-hour time flex_t12_lst list using \"hms\" flexible type:     24-hour variant, flex_t24_lst, similar \"Hms\" flexible type give us 24-hour version clock time:     flexible date time can used together enveloping two list (bigD handle putting date time together sensible manner).","code":"fdt(   input = \"2021-01-09 16:32(America/Toronto)\",   format = flex_d_lst$yMMMEd, ) #> [1] \"Sat, Jan 9, 2021\" fdt(   input = \"2021-01-09 16:32(America/Toronto)\",   format = flex_d_lst$yMMMEd,   locale = \"fr_CA\" ) #> [1] \"sam. 9 janv. 2021\" fdt(   input = \"2021-01-09 16:32(America/Toronto)\",   format = flex_t12_lst$hms ) #> [1] \"4:32:00 PM\" fdt(   input = \"2021-01-09 16:32(America/Toronto)\",   format = flex_t24_lst$Hms ) #> [1] \"16:32:00\" fdt(   input = \"2021-01-09 16:32(America/Toronto)\",   format = list(flex_d_lst$yMMMEd, flex_t24_lst$Hmv) ) #> \"Sat, Jan 9, 2021, 16:32 ET\""},{"path":"/reference/fdt_locales_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all supported locales — fdt_locales_lst","title":"A list of all supported locales — fdt_locales_lst","text":"fdt_locales_lst object list supported locales. useful used fdt() function list can auto-completed locale identifier generates valid input locale argument.","code":""},{"path":"/reference/fdt_locales_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all supported locales — fdt_locales_lst","text":"","code":"fdt_locales_lst"},{"path":"/reference/fdt_locales_lst.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of all supported locales — fdt_locales_lst","text":"object class list length 574.","code":""},{"path":"/reference/fdt_locales_lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of all supported locales — fdt_locales_lst","text":"list element corresponds supported locale ID.","code":""},{"path":"/reference/fdt_locales_lst.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of all supported locales — fdt_locales_lst","text":"fdt_locales_lst object can incredibly useful choosing one supported locales. can avoid typing errors every element list meant work. example, use \"da\" locale use list.","code":"fdt(   input = \"2018-07-04 22:05\",   format = \"yy-MMMM-d\",   locale = fdt_locales_lst$da ) #> [1] \"18-juli-4\""},{"path":"/reference/fdt_locales_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all supported locales — fdt_locales_vec","title":"Get a vector of all supported locales — fdt_locales_vec","text":"fdt_locales_vec() function produces vector supported locale IDs bigD package.","code":""},{"path":"/reference/fdt_locales_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all supported locales — fdt_locales_vec","text":"","code":"fdt_locales_vec()"},{"path":"/reference/fdt_locales_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all supported locales — fdt_locales_vec","text":"character vector supported locale IDs.","code":""},{"path":"/reference/fdt_locales_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of all supported locales — fdt_locales_vec","text":"","code":"# Let's get all the `ar` locales that exist # in the vector produced by `fdt_locales_vec()` grep(\"^ar\", fdt_locales_vec(), value = TRUE) #>  [1] \"ar\"    \"ar_AE\" \"ar_BH\" \"ar_DJ\" \"ar_DZ\" \"ar_EG\" \"ar_EH\" \"ar_ER\" \"ar_IL\" #> [10] \"ar_IQ\" \"ar_JO\" \"ar_KM\" \"ar_KW\" \"ar_LB\" \"ar_LY\" \"ar_MA\" \"ar_MR\" \"ar_OM\" #> [19] \"ar_PS\" \"ar_QA\" \"ar_SA\" \"ar_SD\" \"ar_SO\" \"ar_SS\" \"ar_SY\" \"ar_TD\" \"ar_TN\" #> [28] \"ar_YE\"  # Let's get all the locales that pertain to the # `CH` territory in the vector produced by # `fdt_locales_vec()` grep(\"CH\", fdt_locales_vec(), value = TRUE) #> [1] \"de_CH\" \"en_CH\" \"fr_CH\" \"it_CH\" \"pt_CH\""},{"path":"/reference/first_day_of_week.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a named vector of all first-day-of-the-week names for different regions — first_day_of_week","title":"Get a named vector of all first-day-of-the-week names for different regions — first_day_of_week","text":"names_months() function produces vector short month names used bigD package.","code":""},{"path":"/reference/first_day_of_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a named vector of all first-day-of-the-week names for different regions — first_day_of_week","text":"","code":"first_day_of_week()"},{"path":"/reference/first_day_of_week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a named vector of all first-day-of-the-week names for different regions — first_day_of_week","text":"character vector short month names.","code":""},{"path":"/reference/first_day_of_week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a named vector of all first-day-of-the-week names for different regions — first_day_of_week","text":"","code":"# Let's get a vector of regions where the # first day of the week is Saturday names(first_day_of_week()[first_day_of_week() == \"sat\"]) #>  [1] \"AE\" \"AF\" \"BH\" \"DJ\" \"DZ\" \"EG\" \"IQ\" \"IR\" \"JO\" \"KW\" \"LY\" \"OM\" \"QA\" \"SD\" \"SY\""},{"path":"/reference/flex_d_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all flexible date types — flex_d_lst","title":"A list of all flexible date types — flex_d_lst","text":"flex_d_lst object list widely supported flexible date types. Flexible date types classes date formatting can translated across locales. 26 flexible date types flex_d_lst.","code":""},{"path":"/reference/flex_d_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all flexible date types — flex_d_lst","text":"","code":"flex_d_lst"},{"path":"/reference/flex_d_lst.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of all flexible date types — flex_d_lst","text":"object class list length 26.","code":""},{"path":"/reference/flex_d_lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of all flexible date types — flex_d_lst","text":"list element corresponds classifier flexible date type.","code":""},{"path":"/reference/flex_d_lst.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of all flexible date types — flex_d_lst","text":"flex_d_lst object can incredibly useful need get format date formatting works across locales. can avoid typing errors using list every flexible date type list guaranteed work across supported locales. example, use \"yMMMEd\" flexible date type accessing flex_d_lst object.     wanted different locale, locale-specific format pattern behind flexible date identifier ensure consistency moving locale. use fdt_locales_lst object spirit specify French (Canada) locale.","code":"fdt(   input = \"2018-07-04 22:05\",   format = flex_d_lst$yMMMEd,   locale = \"en\" ) #> [1] \"Wed, Jul 4, 2018\" fdt(   input = \"2018-07-04 22:05\",   format = flex_d_lst$yMMMEd,   locale = fdt_locales_lst$fr_CA ) #> [1] \"mer. 4 juill. 2018\""},{"path":"/reference/flex_d_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all flexible date types — flex_d_vec","title":"Get a vector of all flexible date types — flex_d_vec","text":"flex_d_vec() function produces vector supported flexible date types bigD package. types essentially identifiers classes cross-locale date formatting, , none used directly format argument fdt() function (use flex_d_lst object ).","code":""},{"path":"/reference/flex_d_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all flexible date types — flex_d_vec","text":"","code":"flex_d_vec()"},{"path":"/reference/flex_d_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all flexible date types — flex_d_vec","text":"character vector supported flexible date types.","code":""},{"path":"/reference/flex_t12_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all 12-hour flexible time types — flex_t12_lst","title":"A list of all 12-hour flexible time types — flex_t12_lst","text":"flex_t12_lst object list 12-hour flexible time types widely supported. Flexible time types classes time formatting can translated across locales. 12 flexible time types 12-hour variety flex_t12_lst.","code":""},{"path":"/reference/flex_t12_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all 12-hour flexible time types — flex_t12_lst","text":"","code":"flex_t12_lst"},{"path":"/reference/flex_t12_lst.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of all 12-hour flexible time types — flex_t12_lst","text":"object class list length 12.","code":""},{"path":"/reference/flex_t12_lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of all 12-hour flexible time types — flex_t12_lst","text":"list element corresponds classifier 12-hour flexible time type.","code":""},{"path":"/reference/flex_t12_lst.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of all 12-hour flexible time types — flex_t12_lst","text":"flex_t12_lst object can incredibly useful need get format 12-hour time formatting works across locales. can avoid typing errors using list every flexible time type list guaranteed work across supported locales. example, use \"Ehms\" flexible time type accessing flex_t12_lst object.     wanted different locale, locale-specific format pattern behind flexible date identifier ensure consistency moving locale. use fdt_locales_lst object spirit specify German (Austria) locale.","code":"fdt(   input = \"2018-07-04 22:05\",   format = flex_t12_lst$Bhms,   locale = \"en\" ) #> [1] \"10:05:00 at night\" fdt(   input = \"2018-07-04 22:05\",   format = flex_t12_lst$Bhms,   locale = fdt_locales_lst$de_AT ) #> [1] \"10:05:00 abends\""},{"path":"/reference/flex_t12_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all 12-hour flexible time types — flex_t12_vec","title":"Get a vector of all 12-hour flexible time types — flex_t12_vec","text":"flex_t12_vec() function produces vector supported flexible 12-hour time types bigD package. types essentially identifiers classes cross-locale time formatting, , none used directly format argument fdt() function (use flex_t12_lst object ).","code":""},{"path":"/reference/flex_t12_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all 12-hour flexible time types — flex_t12_vec","text":"","code":"flex_t12_vec()"},{"path":"/reference/flex_t12_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all 12-hour flexible time types — flex_t12_vec","text":"character vector supported 12-hour flexible time types.","code":""},{"path":"/reference/flex_t24_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all 24-hour flexible time types — flex_t24_lst","title":"A list of all 24-hour flexible time types — flex_t24_lst","text":"flex_t24_lst object list 24-hour flexible time types widely supported. Flexible time types classes time formatting can translated across locales. 8 flexible time types 24-hour variety flex_t24_lst.","code":""},{"path":"/reference/flex_t24_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all 24-hour flexible time types — flex_t24_lst","text":"","code":"flex_t24_lst"},{"path":"/reference/flex_t24_lst.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of all 24-hour flexible time types — flex_t24_lst","text":"object class list length 8.","code":""},{"path":"/reference/flex_t24_lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of all 24-hour flexible time types — flex_t24_lst","text":"list element corresponds classifier 24-hour flexible time type.","code":""},{"path":"/reference/flex_t24_lst.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of all 24-hour flexible time types — flex_t24_lst","text":"flex_t24_lst object can incredibly useful need get format 24-hour time formatting works across locales. can avoid typing errors using list every flexible time type list guaranteed work across supported locales. example, use \"EHms\" flexible time type accessing flex_t24_lst object.     wanted different locale, locale-specific format pattern behind flexible date identifier ensure consistency moving locale. use fdt_locales_lst object spirit specify German locale.","code":"fdt(   input = \"2018-07-04 22:05\",   format = flex_t24_lst$EHms,   locale = \"en\" ) #> [1] \"Wed 22:05:00\" fdt(   input = \"2018-07-04 22:05\",   format = flex_t24_lst$EHms,   locale = fdt_locales_lst$de ) #> [1] \"Mi, 22:05:00\""},{"path":"/reference/flex_t24_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all 24-hour flexible time types — flex_t24_vec","title":"Get a vector of all 24-hour flexible time types — flex_t24_vec","text":"flex_t24_vec() function produces vector supported flexible 24-hour time types bigD package. types essentially identifiers classes cross-locale time formatting, , none used directly format argument fdt() function (use flex_t24_lst object ).","code":""},{"path":"/reference/flex_t24_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all 24-hour flexible time types — flex_t24_vec","text":"","code":"flex_t24_vec()"},{"path":"/reference/flex_t24_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all 24-hour flexible time types — flex_t24_vec","text":"character vector supported 24-hour flexible time types.","code":""},{"path":"/reference/names_months.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all the short month names — names_months","title":"Get a vector of all the short month names — names_months","text":"names_months() function produces vector short month names used bigD package.","code":""},{"path":"/reference/names_months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all the short month names — names_months","text":"","code":"names_months()"},{"path":"/reference/names_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all the short month names — names_months","text":"character vector short month names.","code":""},{"path":"/reference/names_months.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of all the short month names — names_months","text":"","code":"# Let's get all the short month names with # the `names_months()` function names_months() #>  [1] \"jan\" \"feb\" \"mar\" \"apr\" \"may\" \"jun\" \"jul\" \"aug\" \"sep\" \"oct\" \"nov\" \"dec\""},{"path":"/reference/names_wkdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of all the short weekday names — names_wkdays","title":"Get a vector of all the short weekday names — names_wkdays","text":"names_wkdays() function produces vector short weekday names used bigD package.","code":""},{"path":"/reference/names_wkdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of all the short weekday names — names_wkdays","text":"","code":"names_wkdays()"},{"path":"/reference/names_wkdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of all the short weekday names — names_wkdays","text":"character vector short weekday names.","code":""},{"path":"/reference/names_wkdays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of all the short weekday names — names_wkdays","text":"","code":"# Let's get all the short weekday names with # the `names_wkdays()` function names_wkdays() #> [1] \"sun\" \"mon\" \"tue\" \"wed\" \"thu\" \"fri\" \"sat\""},{"path":"/reference/standard_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a standard date format that works across locales — standard_date","title":"Obtain a standard date format that works across locales — standard_date","text":"standard_date() function can invoked format argument fdt() function help generate locale-specific formatting string certain 'type' formatted date. type value keyword represents precision verbosity; available keywords \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a standard date format that works across locales — standard_date","text":"","code":"standard_date(type = c(\"short\", \"medium\", \"long\", \"full\"))"},{"path":"/reference/standard_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a standard date format that works across locales — standard_date","text":"type One four standardized types resulting date range precision verbosity. \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a standard date format that works across locales — standard_date","text":"vector class date_time_pattern.","code":""},{"path":"/reference/standard_date.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a standard date format that works across locales — standard_date","text":"input datetime \"2018-07-04 22:05(America/Vancouver)\", can format date standardized way standard_date() providing correct formatting string. function invoked format argument fdt():     locale can changed worry particulars formatting string (standardized across locales).     can use different type values control output date string. default \"short\".     , \"medium\":     , \"long\":     finally \"full\", demonstrated first example.","code":"fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date(type = \"full\") ) #> [1] \"Wednesday, July 4, 2018\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date(type = \"full\"),   locale = fdt_locales_lst$nl ) #> [1] \"woensdag 4 juli 2018\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date() ) #> [1] \"7/4/18\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date(type = \"medium\") ) #> [1] \"Jul 4, 2018\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date(type = \"long\") ) #> [1] \"July 4, 2018\""},{"path":"/reference/standard_date_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a standard datetime format that works across locales — standard_date_time","title":"Obtain a standard datetime format that works across locales — standard_date_time","text":"standard_date_time() function can invoked format argument fdt() function help generate locale-specific formatting string certain 'type' formatted datetime. type value keyword represents precision verbosity; available keywords \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_date_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a standard datetime format that works across locales — standard_date_time","text":"","code":"standard_date_time(type = c(\"short\", \"medium\", \"long\", \"full\"))"},{"path":"/reference/standard_date_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a standard datetime format that works across locales — standard_date_time","text":"type One four standardized types resulting datetime range precision verbosity. \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_date_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a standard datetime format that works across locales — standard_date_time","text":"vector class date_time_pattern.","code":""},{"path":"/reference/standard_date_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a standard datetime format that works across locales — standard_date_time","text":"input datetime \"2018-07-04 22:05(America/Vancouver)\", can format date time standardized way standard_date_time() providing correct formatting string. function invoked format argument fdt():     locale can changed worry particulars formatting string (standardized across locales).     can use different type values control output datetime string. default \"short\".     , \"medium\":     \"short\" \"medium\" types display time zone information output. Beginning \"long\", tz shown.     include time zone information input, \"UTC\" time zone assumed:","code":"fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"full\") ) #> [1] \"Wednesday, July 4, 2018 at 10:05:00 PM Pacific Daylight Time\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"full\"),   locale = fdt_locales_lst$nl ) #> [1] \"woensdag 4 juli 2018 om 22:05:00 Pacific-zomertijd\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time() ) #> [1] \"7/4/18, 10:05 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"medium\") ) #> [1] \"Jul 4, 2018, 10:05:00 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_date_time(type = \"long\") ) #> [1] \"July 4, 2018 at 10:05:00 PM PDT\" fdt(   input = \"2018-07-04 22:05\",   format = standard_date_time(type = \"full\") ) #> [1] \"Wednesday, July 4, 2018 at 10:05:00 PM GMT+00:00\""},{"path":"/reference/standard_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a standard time format that works across locales — standard_time","title":"Obtain a standard time format that works across locales — standard_time","text":"standard_time() function can invoked format argument fdt() function help generate locale-specific formatting string certain 'type' formatted time. type value keyword represents precision verbosity; available keywords \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a standard time format that works across locales — standard_time","text":"","code":"standard_time(type = c(\"short\", \"medium\", \"long\", \"full\"))"},{"path":"/reference/standard_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a standard time format that works across locales — standard_time","text":"type One four standardized types resulting time range precision verbosity. \"short\" (default), \"medium\", \"long\", \"full\".","code":""},{"path":"/reference/standard_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a standard time format that works across locales — standard_time","text":"vector class date_time_pattern.","code":""},{"path":"/reference/standard_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a standard time format that works across locales — standard_time","text":"input datetime \"2018-07-04 22:05(America/Vancouver)\", can format time standardized way standard_time() providing correct formatting string. function invoked format argument fdt():     locale can changed worry particulars formatting string (standardized across locales).     can use different type values control output date string. default \"short\".     , \"medium\":     , \"long\":     finally \"full\", demonstrated first example.","code":"fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_time(type = \"full\") ) #> [1] \"10:05:00 PM Pacific Daylight Time\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_time(type = \"full\"),   locale = fdt_locales_lst$nl ) #> [1] \"22:05:00 Pacific-zomertijd\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_time() ) #> [1] \"10:05 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_time(type = \"medium\") ) #> [1] \"10:05:00 PM\" fdt(   input = \"2018-07-04 22:05(America/Vancouver)\",   format = standard_time(type = \"long\") ) #> [1] \"10:05:00 PM PDT\""},{"path":"/news/index.html","id":"bigd-031","dir":"Changelog","previous_headings":"","what":"bigD 0.3.1","title":"bigD 0.3.1","text":"Introduced performance improvements (@olivroy, #15, #16, #17). Internal functions dt_MM(), dt_yyy() friends longer used, use new internal structure avoid duplicate calculations","code":""},{"path":"/news/index.html","id":"bigd-030","dir":"Changelog","previous_headings":"","what":"bigD 0.3.0","title":"bigD 0.3.0","text":"CRAN release: 2024-11-08 locale’s territory now better resolved week month calculations. Corrected formatting localized GMT formats. Depend R >= 3.3 use strrep() startsWith()","code":""},{"path":"/news/index.html","id":"bigd-020","dir":"Changelog","previous_headings":"","what":"bigD 0.2.0","title":"bigD 0.2.0","text":"CRAN release: 2022-09-05 New package everything need format dates times.","code":""}]
